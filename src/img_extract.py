"""
Image extraction and description utilities for NotesAssistant.
Handles conversion of images to text descriptions using LLM.
"""

from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import HumanMessage
import base64
from tenacity import retry, stop_after_attempt, wait_exponential
import os

@retry(
    stop=stop_after_attempt(5),
    wait= wait_exponential(multiplier=1, min=2, max=10),  
)
def img_to_llm(image_file_path, llm):
    """
    Passes an image to the LLM and returns a description of the image.

    Args:
        image_file_path (str): Path to the image file.
        llm: The language model instance to use.

    Returns:
        str: Description of the image generated by the LLM.

    Raises:
        Exception: If the LLM request fails.
    """

    try:
        with open(image_file_path, "rb") as image_file:
            image_data = image_file.read()
        encoded_image = base64.b64encode(image_data).decode('utf-8')

        message = HumanMessage(
            content=[
                {"type": "text", "text": "Describe the image sent. Send it as plain text in paragraphs with no formatting"},
                {
                    "type": "image_url",
                    "image_url": {"url": f"data:image/png;base64,{encoded_image}"}
                }
            ]
        )

        response = llm.invoke([message])
        return response.content
        
    except Exception as e:
        print(f"LLM Request for image conversion failed: {str(e)}")
        raise


def img_to_txt(output_path, num_pages, llm):
    """
    Converts images to text descriptions and saves them to text files.

    Args:
        output_path (str): Directory containing image files and where text files will be saved.
        num_pages (int): Number of images/pages to process.
        llm: The language model instance to use.

    Returns:
        None
    """
    text_folder = os.path.join(output_path, "output_text")
    os.makedirs(text_folder, exist_ok=True)
    for i in range(num_pages):
        image_filename = os.path.join(output_path, f'page_{i+1:03}.jpg')
        llm_output = img_to_llm(image_filename, llm)
        text_filename = os.path.join(text_folder, f'page_{i+1:03}.txt')
        with open(text_filename, 'w', encoding='utf-8') as f:
            f.write(llm_output)